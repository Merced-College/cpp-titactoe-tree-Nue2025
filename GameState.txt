#include <iostream>
#include <vector>
#include <limits>
using namespace std;

const char EMPTY = ' ';

class GameState {
    private:
        vector<char> board; // 9 cells for Tic-Tac-Toe
    
    public:
        GameState() : board(9, EMPTY) {}
    
        GameState(const vector<char>& b) : board(b) {}
    
        void printBoard() const {
            for (int i = 0; i < 9; ++i) {
                cout << (board[i] == EMPTY ? '-' : board[i]) << " ";
                if ((i + 1) % 3 == 0) cout << endl;
            }
        }
    
        bool isFull() const {
            for (char c : board)
                if (c == EMPTY) return false;
            return true;
        }
    
        bool isGameOver() const {
            return checkWinner() != EMPTY || isFull();
        }
    
        char checkWinner() const {
            const int winPatterns[8][3] = {
                {0,1,2}, {3,4,5}, {6,7,8},
                {0,3,6}, {1,4,7}, {2,5,8},
                {0,4,8}, {2,4,6}
            };
    
            for (auto& pattern : winPatterns) {
                if (board[pattern[0]] != EMPTY &&
                    board[pattern[0]] == board[pattern[1]] &&
                    board[pattern[1]] == board[pattern[2]]) {
                    return board[pattern[0]];
                }
            }
            return EMPTY;
        }
    
        vector<int> getAvailableMoves() const {
            vector<int> moves;
            for (int i = 0; i < 9; ++i)
                if (board[i] == EMPTY) moves.push_back(i); //checks to see if the board is empty, and then pushes it into a vector.
            return moves;
        }
    
        GameState makeMove(int index, char player) const { //returns it to a game state object. takes the index and the player move.
            vector<char> newBoard = board; //creates vector based off the old board.
            newBoard[index] = player; 
            return GameState(newBoard); //returs the game state object.
        }
    
        const vector<char>& getBoard() const {
            return board;
        }
    };